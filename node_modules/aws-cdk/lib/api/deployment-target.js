"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../logging");
const serialize_1 = require("../serialize");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const toolkit_info_1 = require("./toolkit-info");
exports.DEFAULT_TOOLKIT_STACK_NAME = 'CDKToolkit';
/**
 * Default provisioner (applies to CloudFormation).
 */
class CloudFormationDeploymentTarget {
    constructor(props) {
        this.aws = props.aws;
    }
    async readCurrentTemplate(stack) {
        logging_1.debug(`Reading existing template for stack ${stack.displayName}.`);
        const cfn = await this.aws.cloudFormation(stack.environment.account, stack.environment.region, credentials_1.Mode.ForReading);
        try {
            const response = await cfn.getTemplate({ StackName: stack.stackName }).promise();
            return (response.TemplateBody && serialize_1.deserializeStructure(response.TemplateBody)) || {};
        }
        catch (e) {
            if (e.code === 'ValidationError' && e.message === `Stack with id ${stack.stackName} does not exist`) {
                return {};
            }
            else {
                throw e;
            }
        }
    }
    async deployStack(options) {
        const toolkitInfo = await toolkit_info_1.loadToolkitInfo(options.stack.environment, this.aws, options.toolkitStackName || exports.DEFAULT_TOOLKIT_STACK_NAME);
        return deploy_stack_1.deployStack({
            stack: options.stack,
            deployName: options.deployName,
            roleArn: options.roleArn,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: this.aws,
            ci: options.ci,
            reuseAssets: options.reuseAssets,
            toolkitInfo,
            tags: options.tags
        });
    }
}
exports.CloudFormationDeploymentTarget = CloudFormationDeploymentTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC10YXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3ltZW50LXRhcmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHdDQUFtQztBQUNuQyw0Q0FBb0Q7QUFDcEQsd0RBQThDO0FBQzlDLGlEQUFnRTtBQUNoRSxpREFBaUQ7QUFHcEMsUUFBQSwwQkFBMEIsR0FBRyxZQUFZLENBQUM7QUE4QnZEOztHQUVHO0FBQ0gsTUFBYSw4QkFBOEI7SUFHekMsWUFBWSxLQUF1QjtRQUNqQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUVNLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFrQztRQUNqRSxlQUFLLENBQUMsdUNBQXVDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRW5FLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsa0JBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoSCxJQUFJO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pGLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxJQUFJLGdDQUFvQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNyRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLGlCQUFpQixJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssaUJBQWlCLEtBQUssQ0FBQyxTQUFTLGlCQUFpQixFQUFFO2dCQUNuRyxPQUFPLEVBQUUsQ0FBQzthQUNYO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7U0FDRjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQTJCO1FBQ2xELE1BQU0sV0FBVyxHQUFHLE1BQU0sOEJBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxrQ0FBMEIsQ0FBQyxDQUFDO1FBQ3ZJLE9BQU8sMEJBQVcsQ0FBQztZQUNqQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO1lBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztZQUN4QixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO1lBQzFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDZCxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDaEMsV0FBVztZQUNYLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF0Q0Qsd0VBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IFRhZyB9IGZyb20gXCIuLi9hcGkvY3hhcHAvc3RhY2tzXCI7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgZGVzZXJpYWxpemVTdHJ1Y3R1cmUgfSBmcm9tICcuLi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgTW9kZSB9IGZyb20gJy4vYXdzLWF1dGgvY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgbG9hZFRvb2xraXRJbmZvIH0gZnJvbSAnLi90b29sa2l0LWluZm8nO1xuaW1wb3J0IHsgSVNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9UT09MS0lUX1NUQUNLX05BTUUgPSAnQ0RLVG9vbGtpdCc7XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlID0geyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHByb3Zpc2lvbmVyc1xuICpcbiAqIFByb3Zpc2lvbmVycyBhcHBseSB0ZW1wbGF0ZXMgdG8gdGhlIGNsb3VkIGluZnJhc3RydWN0dXJlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEZXBsb3ltZW50VGFyZ2V0IHtcbiAgcmVhZEN1cnJlbnRUZW1wbGF0ZShzdGFjazogQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT47XG4gIGRlcGxveVN0YWNrKG9wdGlvbnM6IERlcGxveVN0YWNrT3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveVN0YWNrT3B0aW9ucyB7XG4gIHN0YWNrOiBDbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3Q7XG4gIHJvbGVBcm4/OiBzdHJpbmc7XG4gIG5vdGlmaWNhdGlvbkFybnM/OiBzdHJpbmdbXTtcbiAgZGVwbG95TmFtZT86IHN0cmluZztcbiAgcXVpZXQ/OiBib29sZWFuO1xuICBjaT86IGJvb2xlYW47XG4gIHRvb2xraXRTdGFja05hbWU/OiBzdHJpbmc7XG4gIHJldXNlQXNzZXRzPzogc3RyaW5nW107XG4gIHRhZ3M/OiBUYWdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm92aXNpb25lclByb3BzIHtcbiAgYXdzOiBJU0RLO1xufVxuXG4vKipcbiAqIERlZmF1bHQgcHJvdmlzaW9uZXIgKGFwcGxpZXMgdG8gQ2xvdWRGb3JtYXRpb24pLlxuICovXG5leHBvcnQgY2xhc3MgQ2xvdWRGb3JtYXRpb25EZXBsb3ltZW50VGFyZ2V0IGltcGxlbWVudHMgSURlcGxveW1lbnRUYXJnZXQge1xuICBwcml2YXRlIHJlYWRvbmx5IGF3czogSVNESztcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvdmlzaW9uZXJQcm9wcykge1xuICAgIHRoaXMuYXdzID0gcHJvcHMuYXdzO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWRDdXJyZW50VGVtcGxhdGUoc3RhY2s6IENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCk6IFByb21pc2U8VGVtcGxhdGU+IHtcbiAgICBkZWJ1ZyhgUmVhZGluZyBleGlzdGluZyB0ZW1wbGF0ZSBmb3Igc3RhY2sgJHtzdGFjay5kaXNwbGF5TmFtZX0uYCk7XG5cbiAgICBjb25zdCBjZm4gPSBhd2FpdCB0aGlzLmF3cy5jbG91ZEZvcm1hdGlvbihzdGFjay5lbnZpcm9ubWVudC5hY2NvdW50LCBzdGFjay5lbnZpcm9ubWVudC5yZWdpb24sIE1vZGUuRm9yUmVhZGluZyk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2ZuLmdldFRlbXBsYXRlKHsgU3RhY2tOYW1lOiBzdGFjay5zdGFja05hbWUgfSkucHJvbWlzZSgpO1xuICAgICAgcmV0dXJuIChyZXNwb25zZS5UZW1wbGF0ZUJvZHkgJiYgZGVzZXJpYWxpemVTdHJ1Y3R1cmUocmVzcG9uc2UuVGVtcGxhdGVCb2R5KSkgfHwge307XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUuY29kZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicgJiYgZS5tZXNzYWdlID09PSBgU3RhY2sgd2l0aCBpZCAke3N0YWNrLnN0YWNrTmFtZX0gZG9lcyBub3QgZXhpc3RgKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlcGxveVN0YWNrKG9wdGlvbnM6IERlcGxveVN0YWNrT3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgICBjb25zdCB0b29sa2l0SW5mbyA9IGF3YWl0IGxvYWRUb29sa2l0SW5mbyhvcHRpb25zLnN0YWNrLmVudmlyb25tZW50LCB0aGlzLmF3cywgb3B0aW9ucy50b29sa2l0U3RhY2tOYW1lIHx8IERFRkFVTFRfVE9PTEtJVF9TVEFDS19OQU1FKTtcbiAgICByZXR1cm4gZGVwbG95U3RhY2soe1xuICAgICAgc3RhY2s6IG9wdGlvbnMuc3RhY2ssXG4gICAgICBkZXBsb3lOYW1lOiBvcHRpb25zLmRlcGxveU5hbWUsXG4gICAgICByb2xlQXJuOiBvcHRpb25zLnJvbGVBcm4sXG4gICAgICBub3RpZmljYXRpb25Bcm5zOiBvcHRpb25zLm5vdGlmaWNhdGlvbkFybnMsXG4gICAgICBxdWlldDogb3B0aW9ucy5xdWlldCxcbiAgICAgIHNkazogdGhpcy5hd3MsXG4gICAgICBjaTogb3B0aW9ucy5jaSxcbiAgICAgIHJldXNlQXNzZXRzOiBvcHRpb25zLnJldXNlQXNzZXRzLFxuICAgICAgdG9vbGtpdEluZm8sXG4gICAgICB0YWdzOiBvcHRpb25zLnRhZ3NcbiAgICB9KTtcbiAgfVxufVxuIl19