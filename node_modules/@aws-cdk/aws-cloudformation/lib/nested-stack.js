"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const cloudformation_generated_1 = require("./cloudformation.generated");
const NESTED_STACK_SYMBOL = Symbol.for('@aws-cdk/aws-cloudformation.NestedStack');
/**
 * A CloudFormation nested stack.
 *
 * When you apply template changes to update a top-level stack, CloudFormation
 * updates the top-level stack and initiates an update to its nested stacks.
 * CloudFormation updates the resources of modified nested stacks, but does not
 * update the resources of unmodified nested stacks.
 *
 * Furthermore, this stack will not be treated as an independent deployment
 * artifact (won't be listed in "cdk list" or deployable through "cdk deploy"),
 * but rather only synthesized as a template and uploaded as an asset to S3.
 *
 * Cross references of resource attributes between the parent stack and the
 * nested stack will automatically be translated to stack parameters and
 * outputs.
 *
 * @experimental
 */
class NestedStack extends core_1.Stack {
    constructor(scope, id, props = {}) {
        const parentStack = findParentStack(scope);
        super(scope, id, { env: { account: parentStack.account, region: parentStack.region } });
        this.parentStack = parentStack;
        const parentScope = new core_1.Construct(scope, id + '.NestedStack');
        Object.defineProperty(this, NESTED_STACK_SYMBOL, { value: true });
        // this is the file name of the synthesized template file within the cloud assembly
        this.templateFile = `${this.node.uniqueId}.nested.template.json`;
        this.parameters = props.parameters || {};
        this.resource = new cloudformation_generated_1.CfnStack(parentScope, `${id}.NestedStackResource`, {
            templateUrl: this.templateUrl,
            parameters: core_1.Lazy.anyValue({ produce: () => Object.keys(this.parameters).length > 0 ? this.parameters : undefined }),
            notificationArns: props.notifications ? props.notifications.map(n => n.topicArn) : undefined,
            timeoutInMinutes: props.timeout ? props.timeout.toMinutes() : undefined,
        });
        // context-aware stack name: if resolved from within this stack, return AWS::StackName
        // if resolved from the outer stack, use the { Ref } of the AWS::CloudFormation::Stack resource
        // which resolves the ARN of the stack. We need to extract the stack name, which is the second
        // component after splitting by "/"
        this._contextualStackName = this.contextualAttribute(core_1.Aws.STACK_NAME, core_1.Fn.select(1, core_1.Fn.split('/', this.resource.ref)));
        this._contextualStackId = this.contextualAttribute(core_1.Aws.STACK_ID, this.resource.ref);
    }
    /**
     * Checks if `x` is an object of type `NestedStack`.
     */
    static isNestedStack(x) {
        return x != null && typeof (x) === 'object' && NESTED_STACK_SYMBOL in x;
    }
    /**
     * An attribute that represents the name of the nested stack.
     *
     * This is a context aware attribute:
     * - If this is referenced from the parent stack, it will return a token that parses the name from the stack ID.
     * - If this is referenced from the context of the nested stack, it will return `{ "Ref": "AWS::StackName" }`
     *
     * @example mystack-mynestedstack-sggfrhxhum7w
     * @attribute
     */
    get stackName() {
        return this._contextualStackName;
    }
    /**
     * An attribute that represents the ID of the stack.
     *
     * This is a context aware attribute:
     * - If this is referenced from the parent stack, it will return `{ "Ref": "LogicalIdOfNestedStackResource" }`.
     * - If this is referenced from the context of the nested stack, it will return `{ "Ref": "AWS::StackId" }`
     *
     * @example "arn:aws:cloudformation:us-east-2:123456789012:stack/mystack-mynestedstack-sggfrhxhum7w/f449b250-b969-11e0-a185-5081d0136786"
     * @attribute
     */
    get stackId() {
        return this._contextualStackId;
    }
    /**
     * Called by the base "prepare" method when a reference is found.
     */
    prepareCrossReference(sourceStack, reference) {
        const targetStack = core_1.Stack.of(reference.target);
        // the nested stack references a resource from the parent stack:
        // we pass it through a as a cloudformation parameter
        if (targetStack === sourceStack.parentStack) {
            // we call "this.resolve" to ensure that tokens do not creep in (for example, if the reference display name includes tokens)
            const paramId = this.resolve(`reference-to-${reference.target.node.uniqueId}.${reference.displayName}`);
            let param = this.node.tryFindChild(paramId);
            if (!param) {
                param = new core_1.CfnParameter(this, paramId, { type: 'String' });
                this.parameters[param.logicalId] = core_1.Token.asString(reference);
            }
            return param.value;
        }
        // parent stack references a resource from the nested stack:
        // we output it from the nested stack and use "Fn::GetAtt" as the reference value
        if (targetStack === this && targetStack.parentStack === sourceStack) {
            return this.getCreateOutputForReference(reference);
        }
        // sibling nested stacks (same parent):
        // output from one and pass as parameter to the other
        if (targetStack.parentStack && targetStack.parentStack === sourceStack.parentStack) {
            const outputValue = this.getCreateOutputForReference(reference);
            return sourceStack.prepareCrossReference(sourceStack, outputValue);
        }
        // nested stack references a value from some other non-nested stack:
        // normal export/import, with dependency between the parents
        if (sourceStack.parentStack && sourceStack.parentStack !== targetStack) {
            return super.prepareCrossReference(sourceStack, reference);
        }
        // some non-nested stack (that is not the parent) references a resource inside the nested stack:
        // we output the value and let our parent export it
        if (!sourceStack.parentStack && targetStack.parentStack && targetStack.parentStack !== sourceStack) {
            const outputValue = this.getCreateOutputForReference(reference);
            return targetStack.parentStack.prepareCrossReference(sourceStack, outputValue);
        }
        throw new Error('unexpected nested stack cross reference');
    }
    getCreateOutputForReference(reference) {
        const outputId = `${reference.target.node.uniqueId}${reference.displayName}`;
        let output = this.node.tryFindChild(outputId);
        if (!output) {
            output = new core_1.CfnOutput(this, outputId, { value: core_1.Token.asString(reference) });
        }
        return this.resource.getAtt(`Outputs.${output.logicalId}`);
    }
    contextualAttribute(innerValue, outerValue) {
        return core_1.Token.asString({
            resolve: (context) => {
                if (core_1.Stack.of(context.scope) === this) {
                    return innerValue;
                }
                else {
                    return outerValue;
                }
            }
        });
    }
}
exports.NestedStack = NestedStack;
/**
 * Validates the scope for a nested stack. Nested stacks must be defined within the scope of another `Stack`.
 */
function findParentStack(scope) {
    if (!scope) {
        throw new Error(`Nested stacks cannot be defined as a root construct`);
    }
    const parentStack = scope.node.scopes.reverse().find(p => core_1.Stack.isStack(p));
    if (!parentStack) {
        throw new Error(`Nested stacks must be defined within scope of another non-nested stack`);
    }
    return parentStack;
}
//# sourceMappingURL=data:application/json;base64,