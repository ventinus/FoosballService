"use strict";
const fs = require("fs");
const os = require("os");
const path = require("path");
const ts_mock_imports_1 = require("ts-mock-imports");
const fs_1 = require("../../lib/fs");
const util = require("../../lib/fs/utils");
const fs_utils_1 = require("./fs-utils");
const testShouldExclude = (test, pattern, expectExclude, expectInclude, shouldExcludeMethod) => {
    for (const exclude of expectExclude) {
        test.ok(shouldExcludeMethod(pattern, exclude), `${exclude} should have been excluded, but wasn't`);
    }
    for (const include of expectInclude) {
        test.ok(!shouldExcludeMethod(pattern, include), `${include} should have been included, but wasn't`);
    }
};
const testShouldExcludeDeep = (test, pattern, expectExclude, expectInclude) => testShouldExclude(test, pattern, expectExclude, expectInclude, (patterns, _path) => {
    const excludeRules = new util.ExcludeRules(patterns);
    return excludeRules.excludeFile(_path);
});
const testShouldExcludeDirectory = (test, pattern, expectExclude, expectInclude) => testShouldExclude(test, pattern, expectExclude, expectInclude, (patterns, _path) => {
    const excludeRules = new util.ExcludeRules(patterns);
    return excludeRules.excludeDirectory(_path);
});
module.exports = {
    shouldExclude: {
        'excludes nothing by default'(test) {
            test.ok(!util.shouldExclude([], path.join('some', 'file', 'path')));
            test.done();
        },
        'excludes requested files'(test) {
            const exclusions = ['*.ignored'];
            test.ok(util.shouldExclude(exclusions, path.join('some', 'file.ignored')));
            test.ok(!util.shouldExclude(exclusions, path.join('some', 'important', 'file')));
            test.done();
        },
        'does not exclude whitelisted files'(test) {
            const exclusions = ['*.ignored', '!important.*'];
            test.ok(!util.shouldExclude(exclusions, path.join('some', 'important.ignored')));
            test.done();
        },
    },
    shouldFollow: {
        always: {
            'follows internal'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', true);
                try {
                    test.ok(util.shouldFollow(fs_1.FollowMode.ALWAYS, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'follows external'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', true);
                try {
                    test.ok(util.shouldFollow(fs_1.FollowMode.ALWAYS, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow internal when the referent does not exist'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', false);
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.ALWAYS, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow external when the referent does not exist'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', false);
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.ALWAYS, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
        },
        external: {
            'does not follow internal'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync');
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.notCalled);
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'follows external'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', true);
                try {
                    test.ok(util.shouldFollow(fs_1.FollowMode.EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow external when referent does not exist'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', false);
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
        },
        blockExternal: {
            'follows internal'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', true);
                try {
                    test.ok(util.shouldFollow(fs_1.FollowMode.BLOCK_EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow internal when referent does not exist'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync', false);
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.BLOCK_EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.calledOnceWith(linkTarget));
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow external'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync');
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.BLOCK_EXTERNAL, sourceRoot, linkTarget));
                    test.ok(mockFsExists.notCalled);
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
        },
        never: {
            'does not follow internal'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join(sourceRoot, 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync');
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.NEVER, sourceRoot, linkTarget));
                    test.ok(mockFsExists.notCalled);
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
            'does not follow external'(test) {
                const sourceRoot = path.join('source', 'root');
                const linkTarget = path.join('alternate', 'referent');
                const mockFsExists = ts_mock_imports_1.ImportMock.mockFunction(fs, 'existsSync');
                try {
                    test.ok(!util.shouldFollow(fs_1.FollowMode.NEVER, sourceRoot, linkTarget));
                    test.ok(mockFsExists.notCalled);
                    test.done();
                }
                finally {
                    mockFsExists.restore();
                }
            },
        }
    },
    shouldExcludeDeep: {
        'without pattern'(test) {
            testShouldExcludeDeep(test, [], [], ['foo.txt']);
            testShouldExcludeDeep(test, [''], [], ['foo.txt']);
            testShouldExcludeDeep(test, ['# comment'], [], ['foo.txt']);
            test.done();
        },
        'basic usage'(test) {
            testShouldExcludeDeep(test, ['foo.txt'], [
                'foo.txt',
                'foo.txt/file',
                'dir/foo.txt',
            ], [
                'bar.txt',
                'foo',
                'foo.txt.old',
            ]);
            test.done();
        },
        'negative contridactory'(test) {
            testShouldExcludeDeep(test, ['foo.txt', '!foo.txt'], [], ['foo.txt']);
            test.done();
        },
        'positive contridactory'(test) {
            testShouldExcludeDeep(test, ['!foo.txt', 'foo.txt'], ['foo.txt'], []);
            test.done();
        },
        'dir single wildcard'(test) {
            testShouldExcludeDeep(test, ['d?r'], [
                'dir',
                'dir/exclude',
                'dir/exclude/file',
            ], [
                'door',
                'door/file',
            ]);
            test.done();
        },
        'dir wildcard'(test) {
            testShouldExcludeDeep(test, ['d*r'], [
                'dir',
                'dir/file',
                'door',
                'door/file',
            ], [
                'dog',
                'dog/file',
            ]);
            test.done();
        },
        'dir deep wildcard'(test) {
            testShouldExcludeDeep(test, ['dir/**/*', '!dir/include/**/*'], [
                'dir/deep',
                'dir/deep/file',
                'dir/deep/deeper/file',
                'dir/include',
            ], [
                'dir',
                'dir/include/deep',
                'dir/include/deep/deeper',
            ]);
            test.done();
        },
        'deep structure'(test) {
            testShouldExcludeDeep(test, ['deep/exclude'], [
                'deep/exclude',
                'deep/exclude/file',
            ], [
                'deep',
                'deep/include',
                'deep/include/file',
            ]);
            test.done();
        },
        'inverted pattern'(test) {
            testShouldExcludeDeep(test, ['*', '!foo.txt', '!d?r', 'dir/exclude'], [
                'bar.txt',
                'dir/exclude',
                'dir/exclude/file',
            ], [
                '.hidden-file',
                'foo.txt',
                'dir',
                'dir/include',
                'dir/include/subdir',
                'exclude/foo.txt',
            ]);
            test.done();
        },
    },
    shouldExcludeDirectory: {
        'without pattern'(test) {
            testShouldExcludeDirectory(test, [], [], ['dir']);
            testShouldExcludeDirectory(test, [''], [], ['dir']);
            testShouldExcludeDirectory(test, ['# comment'], [], ['dir']);
            test.done();
        },
        'basic usage'(test) {
            const pattern = ['dir', '!dir/*', 'other_dir'];
            testShouldExcludeDeep(test, pattern, ['dir', 'other_dir'], ['dir/file']);
            testShouldExcludeDirectory(test, pattern, ['dir/deep', 'other_dir'], ['dir']);
            test.done();
        },
        'deep structure'(test) {
            const pattern = ['dir', '!dir/subdir/?', 'other_dir', 'really/deep/structure/of/files/and/dirs'];
            testShouldExcludeDeep(test, pattern, ['dir', 'dir/subdir', 'other_dir'], ['dir/subdir/a']);
            testShouldExcludeDirectory(test, pattern, ['other_dir', 'dir/subdir/d'], ['dir', 'dir/subdir']);
            test.done();
        },
        'wildcard pattern'(test) {
            const pattern = ['dir', '!dir/*/*', 'other_dir'];
            testShouldExcludeDeep(test, pattern, ['dir', 'other_dir', 'dir/file'], ['dir/file/deep']);
            testShouldExcludeDirectory(test, pattern, ['other_dir', 'dir/deep/struct'], ['dir', 'dir/deep', 'dir/deep']);
            test.done();
        },
        'deep wildcard'(test) {
            const pattern = ['dir', '!dir/**/*', 'other_dir'];
            testShouldExcludeDeep(test, pattern, ['dir', 'other_dir'], ['dir/file', 'dir/file/deep']);
            testShouldExcludeDirectory(test, pattern, ['other_dir'], ['dir', 'dir/deep', 'dir/deep/struct', 'dir/really/really/really/really/deep']);
            test.done();
        },
    },
    listFilesRecursively: {
        'basic usage'(test) {
            const exclude = [''];
            const follow = fs_1.FollowMode.ALWAYS;
            const tree = `
      ├── directory
      │   ├── foo.txt
      │   └── bar.txt
      ├── empty-dir (D)
      ├── deep
      │   ├── dir
      │   │   └── struct
      │   │       └── qux.txt
      ├── foobar.txt`;
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('basic', tree);
            const paths = util.listFilesRecursively(directory, { exclude, follow }).map(({ relativePath }) => relativePath);
            test.deepEqual(paths, [
                'deep/dir/struct/qux.txt',
                'directory/bar.txt',
                'directory/foo.txt',
                'empty-dir',
                'foobar.txt',
            ]);
            cleanup();
            test.done();
        },
        'exclude'(test) {
            const exclude = ['foobar.txt', 'deep', '!deep/foo.txt'];
            const follow = fs_1.FollowMode.ALWAYS;
            const tree = `
      ├── directory
      │   ├── foo.txt
      │   └── bar.txt
      ├── deep
      │   ├── dir
      │   │   └── struct
      │   │       └── qux.txt
      │   ├── foo.txt
      │   └── bar.txt
      ├── foobar.txt`;
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('exclude', tree);
            const paths = util.listFilesRecursively(directory, { exclude, follow }).map(({ relativePath }) => relativePath);
            test.deepEqual(paths, [
                'deep/foo.txt',
                'directory/bar.txt',
                'directory/foo.txt',
            ]);
            cleanup();
            test.done();
        },
        'symlinks': {
            'without exclusion'(test) {
                const exclude = [''];
                const externalTree = fs_utils_1.FsUtils.fromTree('exclude', `
          ├── external_dir
          │   ├── foobar.txt`);
                const internalTree = fs_utils_1.FsUtils.fromTree('exclude', `
          ├── directory
          │   ├── foo.txt
          ├── internal_link -> directory
          ├── external_link -> ../${path.relative(os.tmpdir(), externalTree.directory)}/external_dir`);
                const expected = {
                    [fs_1.FollowMode.NEVER]: [
                        'directory/foo.txt',
                        'external_link',
                        'internal_link',
                    ],
                    [fs_1.FollowMode.ALWAYS]: [
                        'directory/foo.txt',
                        'external_link/foobar.txt',
                        'internal_link/foo.txt',
                    ],
                    [fs_1.FollowMode.EXTERNAL]: [
                        'directory/foo.txt',
                        'external_link/foobar.txt',
                        'internal_link'
                    ],
                    [fs_1.FollowMode.BLOCK_EXTERNAL]: [
                        'directory/foo.txt',
                        'external_link',
                        'internal_link/foo.txt',
                    ],
                };
                for (const follow of Object.values(fs_1.FollowMode)) {
                    const paths = util.listFilesRecursively(internalTree.directory, { exclude, follow }).map(({ relativePath }) => relativePath);
                    test.deepEqual(paths, expected[follow], follow);
                }
                internalTree.cleanup();
                externalTree.cleanup();
                test.done();
            },
        },
        'exclude targets'(test) {
            const exclude = ['external_dir', 'directory'];
            const follow = fs_1.FollowMode.ALWAYS;
            const externalTree = fs_utils_1.FsUtils.fromTree('exclude', `
        ├── external_dir
        │   ├── foobar.txt`);
            const internalTree = fs_utils_1.FsUtils.fromTree('exclude', `
        ├── directory
        │   ├── foo.txt
        ├── internal_link -> directory
        ├── external_link -> ../${path.relative(os.tmpdir(), externalTree.directory)}/external_dir`);
            const paths = util.listFilesRecursively(internalTree.directory, { exclude, follow }).map(({ relativePath }) => relativePath);
            test.deepEqual(paths, [
                'external_link/foobar.txt',
                'internal_link/foo.txt'
            ]);
            internalTree.cleanup();
            externalTree.cleanup();
            test.done();
        },
        'exclude links'(test) {
            const exclude = ['internal_link', 'external_link'];
            const follow = fs_1.FollowMode.ALWAYS;
            const externalTree = fs_utils_1.FsUtils.fromTree('exclude', `
        ├── external_dir
        │   ├── foobar.txt`);
            const internalTree = fs_utils_1.FsUtils.fromTree('exclude', `
        ├── directory
        │   ├── foo.txt
        ├── internal_link -> directory
        ├── external_link -> ../${path.relative(os.tmpdir(), externalTree.directory)}/external_dir`);
            const paths = util.listFilesRecursively(internalTree.directory, { exclude, follow }).map(({ relativePath }) => relativePath);
            test.deepEqual(paths, [
                'directory/foo.txt'
            ]);
            internalTree.cleanup();
            externalTree.cleanup();
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,