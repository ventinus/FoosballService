import { Test } from 'nodeunit';
declare const _default: {
    shouldExclude: {
        'excludes nothing by default'(test: Test): void;
        'excludes requested files'(test: Test): void;
        'does not exclude whitelisted files'(test: Test): void;
    };
    shouldFollow: {
        always: {
            'follows internal'(test: Test): void;
            'follows external'(test: Test): void;
            'does not follow internal when the referent does not exist'(test: Test): void;
            'does not follow external when the referent does not exist'(test: Test): void;
        };
        external: {
            'does not follow internal'(test: Test): void;
            'follows external'(test: Test): void;
            'does not follow external when referent does not exist'(test: Test): void;
        };
        blockExternal: {
            'follows internal'(test: Test): void;
            'does not follow internal when referent does not exist'(test: Test): void;
            'does not follow external'(test: Test): void;
        };
        never: {
            'does not follow internal'(test: Test): void;
            'does not follow external'(test: Test): void;
        };
    };
    shouldExcludeDeep: {
        'without pattern'(test: Test): void;
        'basic usage'(test: Test): void;
        'negative contridactory'(test: Test): void;
        'positive contridactory'(test: Test): void;
        'dir single wildcard'(test: Test): void;
        'dir wildcard'(test: Test): void;
        'dir deep wildcard'(test: Test): void;
        'deep structure'(test: Test): void;
        'inverted pattern'(test: Test): void;
    };
    shouldExcludeDirectory: {
        'without pattern'(test: Test): void;
        'basic usage'(test: Test): void;
        'deep structure'(test: Test): void;
        'wildcard pattern'(test: Test): void;
        'deep wildcard'(test: Test): void;
    };
    listFilesRecursively: {
        'basic usage'(test: Test): void;
        'exclude'(test: Test): void;
        'symlinks': {
            'without exclusion'(test: Test): void;
        };
        'exclude targets'(test: Test): void;
        'exclude links'(test: Test): void;
    };
};
export = _default;
