"use strict";
const fs = require("fs");
const os = require("os");
const path = require("path");
const fs_utils_1 = require("./fs-utils");
module.exports = {
    fromTree: {
        'basic usage'(test) {
            // GIVEN
            const tree = `
      ├── foo
      └── dir
        └── subdir/
          └── bar.txt`;
            // THEN
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('basic-usage', tree);
            test.ok(fs.existsSync(path.join(directory, 'foo')));
            test.ok(fs.existsSync(path.join(directory, 'dir', 'subdir', 'bar.txt')));
            cleanup();
            test.ok(!fs.existsSync(path.join(directory, 'foo')));
            test.ok(!fs.existsSync(path.join(directory, 'dir', 'subdir', 'bar.txt')));
            test.ok(!fs.existsSync(directory));
            test.done();
        },
        'symlinks'(test) {
            // GIVEN
            const tree = `
      ├── link -> target
      ├── other_link=>target
      ├── target
          └── foo.txt`;
            // THEN
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('symlink', tree);
            test.ok(fs.existsSync(path.join(directory, 'target', 'foo.txt')));
            test.ok(fs.existsSync(path.join(directory, 'link', 'foo.txt')));
            test.ok(fs.existsSync(path.join(directory, 'other_link', 'foo.txt')));
            test.equal(fs.readlinkSync(path.join(directory, 'link')), 'target');
            test.equal(fs.readlinkSync(path.join(directory, 'other_link')), 'target');
            cleanup();
            test.ok(!fs.existsSync(path.join(directory, 'target')));
            test.ok(!fs.existsSync(path.join(directory, 'link')));
            test.ok(!fs.existsSync(path.join(directory, 'other_link')));
            test.ok(!fs.existsSync(directory));
            test.done();
        },
        'external smylinks'(test) {
            // GIVEN
            const externalTree = fs_utils_1.FsUtils.fromTree('external', `
        ├── external_dir
        │   ├── foobar.txt`);
            // THEN
            const externalRelativeDirectory = path.relative(os.tmpdir(), externalTree.directory);
            const externalLink = `../${externalRelativeDirectory}/external_dir`;
            const internalTree = fs_utils_1.FsUtils.fromTree('internal', `
        ├── external_link -> ${externalLink}`);
            test.ok(fs.existsSync(path.join(externalTree.directory, 'external_dir', 'foobar.txt')));
            test.ok(fs.existsSync(path.join(internalTree.directory, 'external_link', 'foobar.txt')));
            test.equal(fs.readlinkSync(path.join(internalTree.directory, 'external_link')), externalLink);
            externalTree.cleanup();
            internalTree.cleanup();
            test.ok(!fs.existsSync(path.join(externalTree.directory, 'external_dir')));
            test.ok(!fs.existsSync(path.join(internalTree.directory, 'external_link')));
            test.ok(!fs.existsSync(internalTree.directory));
            test.ok(!fs.existsSync(externalTree.directory));
            test.done();
        },
        'empty directory'(test) {
            // GIVEN
            const tree = `
      ├── dir (D)`;
            // THEN
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('empty-directory', tree);
            test.ok(fs.existsSync(path.join(directory, 'dir')));
            cleanup();
            test.ok(!fs.existsSync(path.join(directory, 'dir')));
            test.ok(!fs.existsSync(directory));
            test.done();
        },
        'works with any indent'(test) {
            // GIVEN
            const tree = `



      ├── foo
      └── dir
       └── subdir
                                        └── bar.txt


                                        `;
            // THEN
            const { directory, cleanup } = fs_utils_1.FsUtils.fromTree('any-indent', tree);
            test.ok(fs.existsSync(path.join(directory, 'foo')));
            test.ok(fs.existsSync(path.join(directory, 'dir', 'subdir', 'bar.txt')));
            cleanup();
            test.ok(!fs.existsSync(path.join(directory, 'foo')));
            test.ok(!fs.existsSync(path.join(directory, 'dir', 'subdir', 'bar.txt')));
            test.ok(!fs.existsSync(directory));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,