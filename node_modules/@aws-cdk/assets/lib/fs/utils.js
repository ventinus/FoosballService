"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const minimatch = require("minimatch");
const path = require("path");
const follow_mode_1 = require("./follow-mode");
/**
 * Determines whether a given file should be excluded or not based on given
 * exclusion glob patterns.
 *
 * @param exclude  exclusion patterns
 * @param filePath file path to be assessed against the pattern
 *
 * @returns `true` if the file should be excluded
 *
 * @deprecated see {@link ExcludeRules.excludeFile}
 */
function shouldExclude(exclude, filePath) {
    const [_shouldExclude] = ExcludeRules.evaluateFile(exclude, filePath);
    return _shouldExclude;
}
exports.shouldExclude = shouldExclude;
/**
 * Set of exclusion evaluation methods
 */
class ExcludeRules {
    constructor(patterns) {
        this.patterns = patterns;
        this.patternComponents = this.patterns.map(ExcludeRules.getPathComponents);
    }
    /**
     * Determines whether a given file should be excluded or not based on given
     * exclusion glob patterns.
     *
     * @param patterns  exclusion patterns
     * @param filePath file path to be assessed against the pattern
     *
     * @returns `true` if the file should be excluded, followed by the index of the rule applied
     */
    static evaluateFile(patterns, filePath) {
        let _shouldExclude = false;
        let exclusionIndex = -1;
        patterns.map((pattern, patternIndex) => {
            if (minimatch(filePath, pattern, { matchBase: true, flipNegate: true })) {
                [_shouldExclude, exclusionIndex] = [!pattern.startsWith('!'), patternIndex];
            }
        });
        return [_shouldExclude, exclusionIndex];
    }
    /**
     * Splits a file or directory path in an array of elements
     * containing each partial path up to that point
     *
     * @param filePath the path to split
     * @returns an array containing each path component
     *
     * @example ExcludeRules.getAccumulatedPathComponents('a/b/c') = ['a', 'a/b', 'a/b/c']
     */
    static getAccumulatedPathComponents(filePath) {
        const accComponents = [];
        for (const component of ExcludeRules.getPathComponents(filePath)) {
            accComponents.push(accComponents.length ?
                [accComponents[accComponents.length - 1], component].join(path.sep) :
                component);
        }
        return accComponents;
    }
    get accumulatedPatternComponents() {
        const patternComponentsLength = this.patternComponents.map(({ length }) => length);
        const maxPatternLength = Math.max(...patternComponentsLength);
        const accPatternComponents = [];
        for (let pattenComponentsLength = 1; pattenComponentsLength <= maxPatternLength; ++pattenComponentsLength) {
            accPatternComponents.push(this.patternComponents.map((pattern) => pattern.slice(0, pattenComponentsLength).join(path.sep)));
        }
        return accPatternComponents;
    }
    /**
     * Determines whether a given file should be excluded,taking into account deep file structures
     *
     * @param filePath file path to be assessed against the pattern
     */
    excludeFile(relativePath) {
        let accExclude = false;
        let accPriority = -1;
        for (const accPath of ExcludeRules.getAccumulatedPathComponents(relativePath)) {
            const [shouldExcludeIt, priorityIt] = ExcludeRules.evaluateFile(this.patterns, accPath);
            if (priorityIt > accPriority) {
                [accExclude, accPriority] = [shouldExcludeIt, priorityIt];
            }
        }
        return accExclude;
    }
    /**
     * Determines whether a given directory should be excluded and not explored further
     * This might be `true` even if the directory is explicitly excluded,
     * but one of its children might be inclunded
     *
     * @param directoryPath directory path to be assessed against the pattern
     */
    excludeDirectory(directoryPath) {
        let _shouldExclude = null;
        for (const accPath of ExcludeRules.getAccumulatedPathComponents(directoryPath)) {
            this.accumulatedPatternComponents.map((accumulatedPatterns, accumulatedIndex) => {
                const [shouldExcludeIt, patternIndex] = ExcludeRules.evaluateFile(accumulatedPatterns, accPath);
                if (patternIndex < 0) {
                    return;
                }
                if (shouldExcludeIt) {
                    if (_shouldExclude === null) {
                        _shouldExclude = true;
                    }
                }
                else if (accumulatedIndex < this.patternComponents[patternIndex].length - 1) {
                    _shouldExclude = shouldExcludeIt;
                }
                else if (!accumulatedPatterns[patternIndex].includes('**')) {
                    _shouldExclude = true;
                }
            });
        }
        return _shouldExclude || false;
    }
}
exports.ExcludeRules = ExcludeRules;
/**
 * Splits a file or directory path in an array of elements
 * containing each path component (directories and file)
 *
 * @param filePath the path to split
 * @returns an array containing each path component
 *
 * @example ExcludeRules.getPathComponents('a/b/c') = ['a', 'b', 'c']
 */
ExcludeRules.getPathComponents = (filePath) => filePath.split(path.sep);
/**
 * Determines whether a symlink should be followed or not, based on a FollowMode.
 *
 * @param mode       the FollowMode.
 * @param sourceRoot the root of the source tree.
 * @param realPath   the real path of the target of the symlink.
 *
 * @returns true if the link should be followed.
 */
function shouldFollow(mode, sourceRoot, realPath) {
    switch (mode) {
        case follow_mode_1.FollowMode.ALWAYS:
            return fs.existsSync(realPath);
        case follow_mode_1.FollowMode.EXTERNAL:
            return !_isInternal() && fs.existsSync(realPath);
        case follow_mode_1.FollowMode.BLOCK_EXTERNAL:
            return _isInternal() && fs.existsSync(realPath);
        case follow_mode_1.FollowMode.NEVER:
            return false;
        default:
            throw new Error(`Unsupported FollowMode: ${mode}`);
    }
    function _isInternal() {
        return path.resolve(realPath).startsWith(path.resolve(sourceRoot));
    }
}
exports.shouldFollow = shouldFollow;
const generateAssetFile = (rootDir, fullFilePath, stat) => ({
    absolutePath: fullFilePath,
    relativePath: path.relative(rootDir, fullFilePath) || path.relative(path.dirname(rootDir), fullFilePath),
    isFile: stat.isFile(),
    isDirectory: stat.isDirectory(),
    size: stat.size,
    isSymbolicLink: false,
});
const generateAssetSymlinkFile = (rootDir, fullFilePath, stat, symlinkTarget) => (Object.assign(Object.assign({}, generateAssetFile(rootDir, fullFilePath, stat)), { isSymbolicLink: true, symlinkTarget }));
function listFilesRecursively(dirOrFile, options, _rootDir) {
    const files = [];
    const exclude = options.exclude || [];
    const rootDir = _rootDir || dirOrFile;
    const followStatsFn = options.follow === follow_mode_1.FollowMode.ALWAYS ? fs.statSync : fs.lstatSync;
    const excludeRules = new ExcludeRules(exclude);
    recurse(dirOrFile);
    function recurse(currentPath, _currentStat) {
        const currentStat = _currentStat || fs.statSync(currentPath);
        if (!currentStat) {
            return;
        }
        for (const file of currentStat.isDirectory() ? fs.readdirSync(currentPath) : ['']) {
            const fullFilePath = path.join(currentPath, file);
            const relativeFilePath = path.relative(rootDir, fullFilePath);
            let stat = followStatsFn(fullFilePath);
            if (!stat) {
                continue;
            }
            const isExcluded = excludeRules.excludeFile(relativeFilePath);
            if (!isExcluded) {
                let target = '';
                if (stat.isSymbolicLink()) {
                    target = fs.readlinkSync(fullFilePath);
                    // determine if this is an external link (i.e. the target's absolute path  is outside of the root directory).
                    const targetPath = path.normalize(path.resolve(currentPath, target));
                    if (shouldFollow(options.follow, rootDir, targetPath)) {
                        stat = fs.statSync(fullFilePath);
                        if (!stat) {
                            continue;
                        }
                    }
                }
                if (stat.isFile()) {
                    files.push(generateAssetFile(rootDir, fullFilePath, stat));
                }
                else if (stat.isSymbolicLink()) {
                    files.push(generateAssetSymlinkFile(rootDir, fullFilePath, stat, target));
                }
            }
            if (stat.isDirectory() && (!isExcluded || !excludeRules.excludeDirectory(relativeFilePath))) {
                const previousLength = files.length;
                recurse(fullFilePath, stat);
                if (files.length === previousLength && !isExcluded) {
                    // helps "copy" create an empty directory
                    files.push(generateAssetFile(rootDir, fullFilePath, stat));
                }
            }
        }
    }
    return files;
}
exports.listFilesRecursively = listFilesRecursively;
//# sourceMappingURL=data:application/json;base64,