import { CopyOptions } from './copy-options';
import { FollowMode } from './follow-mode';
/**
 * Determines whether a given file should be excluded or not based on given
 * exclusion glob patterns.
 *
 * @param exclude  exclusion patterns
 * @param filePath file path to be assessed against the pattern
 *
 * @returns `true` if the file should be excluded
 *
 * @deprecated see {@link ExcludeRules.excludeFile}
 */
export declare function shouldExclude(exclude: string[], filePath: string): boolean;
/**
 * Set of exclusion evaluation methods
 */
export declare class ExcludeRules {
    private readonly patterns;
    /**
     * Determines whether a given file should be excluded or not based on given
     * exclusion glob patterns.
     *
     * @param patterns  exclusion patterns
     * @param filePath file path to be assessed against the pattern
     *
     * @returns `true` if the file should be excluded, followed by the index of the rule applied
     */
    static evaluateFile(patterns: string[], filePath: string): [boolean, number];
    /**
     * Splits a file or directory path in an array of elements
     * containing each path component (directories and file)
     *
     * @param filePath the path to split
     * @returns an array containing each path component
     *
     * @example ExcludeRules.getPathComponents('a/b/c') = ['a', 'b', 'c']
     */
    private static getPathComponents;
    /**
     * Splits a file or directory path in an array of elements
     * containing each partial path up to that point
     *
     * @param filePath the path to split
     * @returns an array containing each path component
     *
     * @example ExcludeRules.getAccumulatedPathComponents('a/b/c') = ['a', 'a/b', 'a/b/c']
     */
    private static getAccumulatedPathComponents;
    private readonly patternComponents;
    private readonly accumulatedPatternComponents;
    constructor(patterns: string[]);
    /**
     * Determines whether a given file should be excluded,taking into account deep file structures
     *
     * @param filePath file path to be assessed against the pattern
     */
    excludeFile(relativePath: string): boolean;
    /**
     * Determines whether a given directory should be excluded and not explored further
     * This might be `true` even if the directory is explicitly excluded,
     * but one of its children might be inclunded
     *
     * @param directoryPath directory path to be assessed against the pattern
     */
    excludeDirectory(directoryPath: string): boolean;
}
/**
 * Determines whether a symlink should be followed or not, based on a FollowMode.
 *
 * @param mode       the FollowMode.
 * @param sourceRoot the root of the source tree.
 * @param realPath   the real path of the target of the symlink.
 *
 * @returns true if the link should be followed.
 */
export declare function shouldFollow(mode: FollowMode, sourceRoot: string, realPath: string): boolean;
declare type AssetFile = {
    absolutePath: string;
    relativePath: string;
    isFile: boolean;
    isDirectory: boolean;
    size: number;
} & ({
    isSymbolicLink: false;
} | {
    isSymbolicLink: true;
    symlinkTarget: string;
});
export declare function listFilesRecursively(dirOrFile: string, options: CopyOptions & Required<Pick<CopyOptions, 'follow'>>, _rootDir?: string): AssetFile[];
export {};
