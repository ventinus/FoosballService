"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const follow_mode_1 = require("./follow-mode");
const mkdirpSync_1 = require("./mkdirpSync");
const utils_1 = require("./utils");
function copyDirectory(srcDir, destDir, options = {}, rootDir) {
    const follow = options.follow !== undefined ? options.follow : follow_mode_1.FollowMode.EXTERNAL;
    rootDir = rootDir || srcDir;
    if (!fs.statSync(srcDir).isDirectory()) {
        throw new Error(`${srcDir} is not a directory`);
    }
    for (const assetFile of utils_1.listFilesRecursively(srcDir, Object.assign(Object.assign({}, options), { follow }), rootDir)) {
        const filePath = assetFile.relativePath;
        const destFilePath = path.join(destDir, filePath);
        if (follow !== follow_mode_1.FollowMode.ALWAYS) {
            if (assetFile.isSymbolicLink) {
                const targetPath = path.normalize(path.resolve(srcDir, assetFile.symlinkTarget));
                if (!utils_1.shouldFollow(follow, rootDir, targetPath)) {
                    fs.symlinkSync(assetFile.symlinkTarget, destFilePath);
                    continue;
                }
            }
        }
        if (!assetFile.isDirectory) {
            mkdirpSync_1.mkdirpSync(path.dirname(destFilePath));
            fs.copyFileSync(assetFile.absolutePath, destFilePath);
        }
        else {
            mkdirpSync_1.mkdirpSync(destFilePath);
        }
    }
}
exports.copyDirectory = copyDirectory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMEI7QUFDMUIsNkJBQThCO0FBRTlCLCtDQUEyQztBQUMzQyw2Q0FBMEM7QUFDMUMsbUNBQTZEO0FBRTdELFNBQWdCLGFBQWEsQ0FBQyxNQUFjLEVBQUUsT0FBZSxFQUFFLFVBQXVCLEVBQUcsRUFBRSxPQUFnQjtJQUN6RyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsd0JBQVUsQ0FBQyxRQUFRLENBQUM7SUFFbkYsT0FBTyxHQUFHLE9BQU8sSUFBSSxNQUFNLENBQUM7SUFFNUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLE1BQU0scUJBQXFCLENBQUMsQ0FBQztLQUNqRDtJQUVELEtBQUssTUFBTSxTQUFTLElBQUksNEJBQW9CLENBQUMsTUFBTSxrQ0FBTSxPQUFPLEtBQUUsTUFBTSxLQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQ25GLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFbEQsSUFBSSxNQUFNLEtBQUssd0JBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxTQUFTLENBQUMsY0FBYyxFQUFFO2dCQUM1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUNqRixJQUFJLENBQUMsb0JBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFO29CQUM5QyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBRXRELFNBQVM7aUJBQ1Y7YUFDRjtTQUNGO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7WUFDMUIsdUJBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDdkMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3ZEO2FBQU07WUFDTCx1QkFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFCO0tBQ0Y7QUFDSCxDQUFDO0FBL0JELHNDQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7IENvcHlPcHRpb25zIH0gZnJvbSAnLi9jb3B5LW9wdGlvbnMnO1xuaW1wb3J0IHsgRm9sbG93TW9kZSB9IGZyb20gJy4vZm9sbG93LW1vZGUnO1xuaW1wb3J0IHsgbWtkaXJwU3luYyB9IGZyb20gJy4vbWtkaXJwU3luYyc7XG5pbXBvcnQgeyBsaXN0RmlsZXNSZWN1cnNpdmVseSwgc2hvdWxkRm9sbG93IH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5RGlyZWN0b3J5KHNyY0Rpcjogc3RyaW5nLCBkZXN0RGlyOiBzdHJpbmcsIG9wdGlvbnM6IENvcHlPcHRpb25zID0geyB9LCByb290RGlyPzogc3RyaW5nKSB7XG4gIGNvbnN0IGZvbGxvdyA9IG9wdGlvbnMuZm9sbG93ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvbGxvdyA6IEZvbGxvd01vZGUuRVhURVJOQUw7XG5cbiAgcm9vdERpciA9IHJvb3REaXIgfHwgc3JjRGlyO1xuXG4gIGlmICghZnMuc3RhdFN5bmMoc3JjRGlyKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3NyY0Rpcn0gaXMgbm90IGEgZGlyZWN0b3J5YCk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGFzc2V0RmlsZSBvZiBsaXN0RmlsZXNSZWN1cnNpdmVseShzcmNEaXIsIHsuLi5vcHRpb25zLCBmb2xsb3d9LCByb290RGlyKSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gYXNzZXRGaWxlLnJlbGF0aXZlUGF0aDtcbiAgICBjb25zdCBkZXN0RmlsZVBhdGggPSBwYXRoLmpvaW4oZGVzdERpciwgZmlsZVBhdGgpO1xuXG4gICAgaWYgKGZvbGxvdyAhPT0gRm9sbG93TW9kZS5BTFdBWVMpIHtcbiAgICAgIGlmIChhc3NldEZpbGUuaXNTeW1ib2xpY0xpbmspIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0UGF0aCA9IHBhdGgubm9ybWFsaXplKHBhdGgucmVzb2x2ZShzcmNEaXIsIGFzc2V0RmlsZS5zeW1saW5rVGFyZ2V0KSk7XG4gICAgICAgIGlmICghc2hvdWxkRm9sbG93KGZvbGxvdywgcm9vdERpciwgdGFyZ2V0UGF0aCkpIHtcbiAgICAgICAgICBmcy5zeW1saW5rU3luYyhhc3NldEZpbGUuc3ltbGlua1RhcmdldCwgZGVzdEZpbGVQYXRoKTtcblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFhc3NldEZpbGUuaXNEaXJlY3RvcnkpIHtcbiAgICAgIG1rZGlycFN5bmMocGF0aC5kaXJuYW1lKGRlc3RGaWxlUGF0aCkpO1xuICAgICAgZnMuY29weUZpbGVTeW5jKGFzc2V0RmlsZS5hYnNvbHV0ZVBhdGgsIGRlc3RGaWxlUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1rZGlycFN5bmMoZGVzdEZpbGVQYXRoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==