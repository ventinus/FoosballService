"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const publicSuffixes = require("./public-suffixes");
/**
 * Returns the apex domain (domain.com) from a subdomain (www.sub.domain.com)
 */
function apexDomain(domainName) {
    const parts = domainName.split('.').reverse();
    let curr = publicSuffixes;
    const accumulated = [];
    for (const part of parts) {
        accumulated.push(part);
        if (!(part in curr)) {
            break;
        }
        curr = curr[part];
    }
    return accumulated.reverse().join('.');
}
exports.apexDomain = apexDomain;
function isDnsValidatedCertificate(cert) {
    return cert.hasOwnProperty('domainName');
}
exports.isDnsValidatedCertificate = isDnsValidatedCertificate;
function getCertificateRegion(cert) {
    const { certificateArn, stack } = cert;
    if (isDnsValidatedCertificate(cert)) {
        const requestResource = cert.node.findChild('CertificateRequestorResource').node.defaultChild;
        // @ts-ignore
        const { _cfnProperties: properties } = requestResource;
        const { Region: region } = properties;
        if (region && !core_1.Token.isUnresolved(region)) {
            return region;
        }
    }
    {
        const { region } = core_1.Arn.parse(certificateArn);
        if (region && !core_1.Token.isUnresolved(region)) {
            return region;
        }
    }
    return core_1.Stack.of(stack).region;
}
exports.getCertificateRegion = getCertificateRegion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBa0Q7QUFHbEQsb0RBQXFEO0FBRXJEOztHQUVHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLFVBQWtCO0lBQzNDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFOUMsSUFBSSxJQUFJLEdBQVEsY0FBYyxDQUFDO0lBRS9CLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUNqQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN4QixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtZQUFFLE1BQU07U0FBRTtRQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFaRCxnQ0FZQztBQUVELFNBQWdCLHlCQUF5QixDQUFDLElBQWtCO0lBQzFELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsOERBRUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxJQUFrQjtJQUNyRCxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztJQUV2QyxJQUFJLHlCQUF5QixDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ25DLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUU5RixhQUFhO1FBQ2IsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsR0FBRyxlQUFlLENBQUM7UUFDdkQsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFFdEMsSUFBSSxNQUFNLElBQUksQ0FBQyxZQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7S0FDRjtJQUVEO1FBQ0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFVBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFN0MsSUFBSSxNQUFNLElBQUksQ0FBQyxZQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7S0FDRjtJQUVELE9BQU8sWUFBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDaEMsQ0FBQztBQXhCRCxvREF3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcm4sIFN0YWNrLCBUb2tlbiB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgSUNlcnRpZmljYXRlIH0gZnJvbSAnLi9jZXJ0aWZpY2F0ZSc7XG5pbXBvcnQgeyBEbnNWYWxpZGF0ZWRDZXJ0aWZpY2F0ZSB9IGZyb20gJy4vZG5zLXZhbGlkYXRlZC1jZXJ0aWZpY2F0ZSc7XG5pbXBvcnQgcHVibGljU3VmZml4ZXMgPSByZXF1aXJlKCcuL3B1YmxpYy1zdWZmaXhlcycpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFwZXggZG9tYWluIChkb21haW4uY29tKSBmcm9tIGEgc3ViZG9tYWluICh3d3cuc3ViLmRvbWFpbi5jb20pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcGV4RG9tYWluKGRvbWFpbk5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHBhcnRzID0gZG9tYWluTmFtZS5zcGxpdCgnLicpLnJldmVyc2UoKTtcblxuICBsZXQgY3VycjogYW55ID0gcHVibGljU3VmZml4ZXM7XG5cbiAgY29uc3QgYWNjdW11bGF0ZWQ6IHN0cmluZ1tdID0gW107XG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgIGFjY3VtdWxhdGVkLnB1c2gocGFydCk7XG4gICAgaWYgKCEocGFydCBpbiBjdXJyKSkgeyBicmVhazsgfVxuICAgIGN1cnIgPSBjdXJyW3BhcnRdO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRlZC5yZXZlcnNlKCkuam9pbignLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEbnNWYWxpZGF0ZWRDZXJ0aWZpY2F0ZShjZXJ0OiBJQ2VydGlmaWNhdGUpOiBjZXJ0IGlzIERuc1ZhbGlkYXRlZENlcnRpZmljYXRlIHtcbiAgcmV0dXJuIGNlcnQuaGFzT3duUHJvcGVydHkoJ2RvbWFpbk5hbWUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENlcnRpZmljYXRlUmVnaW9uKGNlcnQ6IElDZXJ0aWZpY2F0ZSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHsgY2VydGlmaWNhdGVBcm4sIHN0YWNrIH0gPSBjZXJ0O1xuXG4gIGlmIChpc0Ruc1ZhbGlkYXRlZENlcnRpZmljYXRlKGNlcnQpKSB7XG4gICAgY29uc3QgcmVxdWVzdFJlc291cmNlID0gY2VydC5ub2RlLmZpbmRDaGlsZCgnQ2VydGlmaWNhdGVSZXF1ZXN0b3JSZXNvdXJjZScpLm5vZGUuZGVmYXVsdENoaWxkO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHsgX2NmblByb3BlcnRpZXM6IHByb3BlcnRpZXMgfSA9IHJlcXVlc3RSZXNvdXJjZTtcbiAgICBjb25zdCB7IFJlZ2lvbjogcmVnaW9uIH0gPSBwcm9wZXJ0aWVzO1xuXG4gICAgaWYgKHJlZ2lvbiAmJiAhVG9rZW4uaXNVbnJlc29sdmVkKHJlZ2lvbikpIHtcbiAgICAgIHJldHVybiByZWdpb247XG4gICAgfVxuICB9XG5cbiAge1xuICAgIGNvbnN0IHsgcmVnaW9uIH0gPSBBcm4ucGFyc2UoY2VydGlmaWNhdGVBcm4pO1xuXG4gICAgaWYgKHJlZ2lvbiAmJiAhVG9rZW4uaXNVbnJlc29sdmVkKHJlZ2lvbikpIHtcbiAgICAgIHJldHVybiByZWdpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFN0YWNrLm9mKHN0YWNrKS5yZWdpb247XG59XG4iXX0=