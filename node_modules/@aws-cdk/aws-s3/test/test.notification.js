"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const s3 = require("../lib");
module.exports = {
    'when notification are added, a custom resource is provisioned + a lambda handler for it'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'MyBucket');
        bucket.addEventNotification(s3.EventType.OBJECT_CREATED, {
            bind: () => ({
                arn: 'ARN',
                type: s3.BucketNotificationDestinationType.TOPIC
            })
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket'));
        assert_1.expect(stack).to(assert_1.haveResource('Custom::S3BucketNotifications'));
        test.done();
    },
    'can specify prefix and suffix filter rules'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'MyBucket');
        bucket.addEventNotification(s3.EventType.OBJECT_CREATED, {
            bind: () => ({
                arn: 'ARN',
                type: s3.BucketNotificationDestinationType.TOPIC
            }),
        }, { prefix: 'images/', suffix: '.png' });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::S3BucketNotifications', {
            NotificationConfiguration: {
                TopicConfigurations: [
                    {
                        Events: [
                            's3:ObjectCreated:*'
                        ],
                        Filter: {
                            Key: {
                                FilterRules: [
                                    {
                                        Name: 'suffix',
                                        Value: '.png'
                                    },
                                    {
                                        Name: 'prefix',
                                        Value: 'images/'
                                    }
                                ]
                            }
                        },
                        TopicArn: 'ARN'
                    }
                ]
            }
        }));
        test.done();
    },
    'the notification lambda handler must depend on the role to prevent executing too early'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'MyBucket');
        bucket.addEventNotification(s3.EventType.OBJECT_CREATED, {
            bind: () => ({
                arn: 'ARN',
                type: s3.BucketNotificationDestinationType.TOPIC
            })
        });
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Lambda::Function', {
            Type: "AWS::Lambda::Function",
            Properties: {
                Role: {
                    "Fn::GetAtt": [
                        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
                        "Arn"
                    ]
                },
            }, DependsOn: ["BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
                "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"]
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
    'throws with multiple prefix rules in a filter'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'MyBucket');
        test.throws(() => bucket.addEventNotification(s3.EventType.OBJECT_CREATED, {
            bind: () => ({
                arn: 'ARN',
                type: s3.BucketNotificationDestinationType.TOPIC
            }),
        }, { prefix: 'images/' }, { prefix: 'archive/' }), /prefix rule/);
        test.done();
    },
    'throws with multiple suffix rules in a filter'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'MyBucket');
        test.throws(() => bucket.addEventNotification(s3.EventType.OBJECT_CREATED, {
            bind: () => ({
                arn: 'ARN',
                type: s3.BucketNotificationDestinationType.TOPIC
            }),
        }, { suffix: '.png' }, { suffix: '.zip' }), /suffix rule/);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,