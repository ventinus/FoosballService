"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const have_resource_1 = require("./lib/assertions/have-resource");
const match_template_1 = require("./lib/assertions/match-template");
const expect_1 = require("./lib/expect");
expect.extend({
    toMatchTemplate(actual, template, matchStyle) {
        const assertion = match_template_1.matchTemplate(template, matchStyle);
        const inspector = expect_1.expect(actual);
        const pass = assertion.assertUsing(inspector);
        if (pass) {
            return {
                pass,
                message: () => `Not ` + assertion.description
            };
        }
        else {
            return {
                pass,
                message: () => assertion.description
            };
        }
    },
    toHaveResource(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, false);
        return assertHaveResource(assertion, actual);
    },
    toHaveResourceLike(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, true);
        return assertHaveResource(assertion, actual);
    }
});
function assertHaveResource(assertion, actual) {
    const inspector = expect_1.expect(actual);
    const pass = assertion.assertUsing(inspector);
    if (pass) {
        return {
            pass,
            message: () => `Not ` + assertion.generateErrorMessage(),
        };
    }
    else {
        return {
            pass,
            message: () => assertion.generateErrorMessage(),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImplc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrRUFBcUY7QUFDckYsb0VBQTRFO0FBQzVFLHlDQUFtRDtBQW1CbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNaLGVBQWUsQ0FDYixNQUFpRCxFQUNqRCxRQUFhLEVBQ2IsVUFBdUI7UUFFdkIsTUFBTSxTQUFTLEdBQUcsOEJBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEQsTUFBTSxTQUFTLEdBQUcsZUFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPO2dCQUNMLElBQUk7Z0JBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsV0FBVzthQUM5QyxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU87Z0JBQ0wsSUFBSTtnQkFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVc7YUFDckMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FDVixNQUFpRCxFQUNqRCxZQUFvQixFQUNwQixVQUFnQixFQUNoQixVQUF5QjtRQUUzQixNQUFNLFNBQVMsR0FBRyxJQUFJLHFDQUFxQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pGLE9BQU8sa0JBQWtCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxrQkFBa0IsQ0FDZCxNQUFpRCxFQUNqRCxZQUFvQixFQUNwQixVQUFnQixFQUNoQixVQUF5QjtRQUUzQixNQUFNLFNBQVMsR0FBRyxJQUFJLHFDQUFxQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sa0JBQWtCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxTQUFTLGtCQUFrQixDQUFDLFNBQWdDLEVBQUUsTUFBaUQ7SUFDN0csTUFBTSxTQUFTLEdBQUcsZUFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPO1lBQ0wsSUFBSTtZQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1NBQ3pELENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1NBQ2hELENBQUM7S0FDSDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjayB9IGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgY3hhcGkgPSByZXF1aXJlKFwiQGF3cy1jZGsvY3gtYXBpXCIpO1xuaW1wb3J0IHsgSGF2ZVJlc291cmNlQXNzZXJ0aW9uLCBSZXNvdXJjZVBhcnQgfSBmcm9tIFwiLi9saWIvYXNzZXJ0aW9ucy9oYXZlLXJlc291cmNlXCI7XG5pbXBvcnQgeyBNYXRjaFN0eWxlLCBtYXRjaFRlbXBsYXRlIH0gZnJvbSBcIi4vbGliL2Fzc2VydGlvbnMvbWF0Y2gtdGVtcGxhdGVcIjtcbmltcG9ydCB7IGV4cGVjdCBhcyBvdXJFeHBlY3QgfSBmcm9tICcuL2xpYi9leHBlY3QnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBqZXN0IHtcbiAgICBpbnRlcmZhY2UgTWF0Y2hlcnM8UiwgVD4ge1xuICAgICAgdG9NYXRjaFRlbXBsYXRlKHRlbXBsYXRlOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2hTdHlsZT86IE1hdGNoU3R5bGUpOiBSO1xuXG4gICAgICB0b0hhdmVSZXNvdXJjZShyZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM/OiBhbnksXG4gICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uPzogUmVzb3VyY2VQYXJ0KTogUjtcblxuICAgICAgdG9IYXZlUmVzb3VyY2VMaWtlKHJlc291cmNlVHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM/OiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCk6IFI7XG4gICAgfVxuICB9XG59XG5cbmV4cGVjdC5leHRlbmQoe1xuICB0b01hdGNoVGVtcGxhdGUoXG4gICAgYWN0dWFsOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QgfCBTdGFjayxcbiAgICB0ZW1wbGF0ZTogYW55LFxuICAgIG1hdGNoU3R5bGU/OiBNYXRjaFN0eWxlKSB7XG5cbiAgICBjb25zdCBhc3NlcnRpb24gPSBtYXRjaFRlbXBsYXRlKHRlbXBsYXRlLCBtYXRjaFN0eWxlKTtcbiAgICBjb25zdCBpbnNwZWN0b3IgPSBvdXJFeHBlY3QoYWN0dWFsKTtcbiAgICBjb25zdCBwYXNzID0gYXNzZXJ0aW9uLmFzc2VydFVzaW5nKGluc3BlY3Rvcik7XG4gICAgaWYgKHBhc3MpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhc3MsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBOb3QgYCArIGFzc2VydGlvbi5kZXNjcmlwdGlvblxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFzcyxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYXNzZXJ0aW9uLmRlc2NyaXB0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICB0b0hhdmVSZXNvdXJjZShcbiAgICAgIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgU3RhY2ssXG4gICAgICByZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICAgIHByb3BlcnRpZXM/OiBhbnksXG4gICAgICBjb21wYXJpc29uPzogUmVzb3VyY2VQYXJ0KSB7XG5cbiAgICBjb25zdCBhc3NlcnRpb24gPSBuZXcgSGF2ZVJlc291cmNlQXNzZXJ0aW9uKHJlc291cmNlVHlwZSwgcHJvcGVydGllcywgY29tcGFyaXNvbiwgZmFsc2UpO1xuICAgIHJldHVybiBhc3NlcnRIYXZlUmVzb3VyY2UoYXNzZXJ0aW9uLCBhY3R1YWwpO1xuICB9LFxuICB0b0hhdmVSZXNvdXJjZUxpa2UoXG4gICAgICBhY3R1YWw6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB8IFN0YWNrLFxuICAgICAgcmVzb3VyY2VUeXBlOiBzdHJpbmcsXG4gICAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCkge1xuXG4gICAgY29uc3QgYXNzZXJ0aW9uID0gbmV3IEhhdmVSZXNvdXJjZUFzc2VydGlvbihyZXNvdXJjZVR5cGUsIHByb3BlcnRpZXMsIGNvbXBhcmlzb24sIHRydWUpO1xuICAgIHJldHVybiBhc3NlcnRIYXZlUmVzb3VyY2UoYXNzZXJ0aW9uLCBhY3R1YWwpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gYXNzZXJ0SGF2ZVJlc291cmNlKGFzc2VydGlvbjogSGF2ZVJlc291cmNlQXNzZXJ0aW9uLCBhY3R1YWw6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB8IFN0YWNrKSB7XG4gIGNvbnN0IGluc3BlY3RvciA9IG91ckV4cGVjdChhY3R1YWwpO1xuICBjb25zdCBwYXNzID0gYXNzZXJ0aW9uLmFzc2VydFVzaW5nKGluc3BlY3Rvcik7XG4gIGlmIChwYXNzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3MsXG4gICAgICBtZXNzYWdlOiAoKSA9PiBgTm90IGAgKyBhc3NlcnRpb24uZ2VuZXJhdGVFcnJvck1lc3NhZ2UoKSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzLFxuICAgICAgbWVzc2FnZTogKCkgPT4gYXNzZXJ0aW9uLmdlbmVyYXRlRXJyb3JNZXNzYWdlKCksXG4gICAgfTtcbiAgfVxufVxuIl19