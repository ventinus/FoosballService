"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("@aws-cdk/core");
const core_1 = require("@aws-cdk/core");
const index_1 = require("../lib/index");
passingExample('expect <synthStack> at <some path> to have <some type>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/TestResource').to(index_1.haveType(resourceType));
});
passingExample('expect non-synthesized stack at <some path> to have <some type>', () => {
    const resourceType = 'Test::Resource';
    const stack = new cdk.Stack();
    new TestResource(stack, 'TestResource', { type: resourceType });
    index_1.expect(stack).at('/TestResource').to(index_1.haveType(resourceType));
});
passingExample('expect <synthStack> at <some path> *not* to have <some type>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/TestResource').notTo(index_1.haveType('Foo::Bar'));
});
passingExample('expect <synthStack> at <some path> to exist', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/TestResource').to(index_1.exist());
});
passingExample('expect <synthStack> to match (exactly) <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    const expected = {
        Resources: {
            TestResource: { Type: resourceType }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.EXACT));
});
passingExample('expect <synthStack> to match (no replaces) <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    const expected = {};
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.NO_REPLACES));
});
passingExample('expect <synthStack> to be a superset of <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        // Added
        new TestResource(stack, 'NewResource', { type: 'AWS::S3::Bucket' });
        // Expected
        new TestResource(stack, 'TestResourceA', { type: resourceType });
        new TestResource(stack, 'TestResourceB', { type: resourceType, properties: { Foo: 'Bar' } });
    });
    const expected = {
        Resources: {
            TestResourceA: { Type: 'Test::Resource' },
            TestResourceB: { Type: 'Test::Resource', Properties: { Foo: 'Bar' } }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.SUPERSET));
});
passingExample('sugar for matching stack to a template', () => {
    const stack = new core_1.Stack();
    new TestResource(stack, 'TestResource', { type: 'Test::Resource' });
    index_1.expect(stack).toMatch({
        Resources: {
            TestResource: {
                Type: 'Test::Resource'
            }
        }
    });
});
passingExample('expect <synthStack> to match (no replaces) <template> with parameters', () => {
    const parameterType = 'Test::Parameter';
    const synthStack = synthesizedStack(stack => {
        new TestParameter(stack, 'TestParameter', { type: parameterType });
    });
    const expected = {};
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.NO_REPLACES));
});
passingExample('expect <synthStack> to be a superset of <template> with parameters', () => {
    const parameterType = 'Test::Parameter';
    const synthStack = synthesizedStack(stack => {
        // Added
        new TestResource(stack, 'NewResource', { type: 'AWS::S3::Bucket' });
        // Expected
        new TestParameter(stack, 'TestParameterA', { type: parameterType });
        new TestParameter(stack, 'TestParameterB', { type: parameterType, default: { Foo: 'Bar' } });
    });
    const expected = {
        Parameters: {
            TestParameterA: { Type: 'Test::Parameter' },
            TestParameterB: { Type: 'Test::Parameter', Default: { Foo: 'Bar' } }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.SUPERSET));
});
failingExample('expect <synthStack> at <some path> *not* to have <some type>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/TestResource').notTo(index_1.haveType(resourceType));
});
failingExample('expect <synthStack> at <some path> to have <some type>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/TestResource').to(index_1.haveType('Foo::Bar'));
});
failingExample('expect <synthStack> at <some path> to exist', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    index_1.expect(synthStack).at('/Foo/Bar').to(index_1.exist());
});
failingExample('expect <synthStack> to match (exactly) <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    const expected = {
        Resources: {
            TestResource: { Type: resourceType, DependsOn: ['Something'] }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.EXACT));
});
failingExample('expect <synthStack> to match (no replaces) <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'TestResource', { type: resourceType });
    });
    const expected = {
        Resources: {
            TestResource: { Type: 'AWS::S3::Bucket' }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.NO_REPLACES));
});
failingExample('expect <synthStack> to be a superset of <template>', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        // Added
        new TestResource(stack, 'NewResource', { type: 'AWS::S3::Bucket' });
        // Expected
        new TestResource(stack, 'TestResourceA', { type: resourceType });
        // Expected, but has different properties - will break
        new TestResource(stack, 'TestResourceB', { type: resourceType, properties: { Foo: 'Bar' } });
    });
    const expected = {
        Resources: {
            TestResourceA: { Type: 'Test::Resource' },
            TestResourceB: { Type: 'Test::Resource', Properties: { Foo: 'Baz' } }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.SUPERSET));
});
failingExample('expect <synthStack> to match (no replaces) <template> with parameters', () => {
    const parameterType = 'Test::Parameter';
    const synthStack = synthesizedStack(stack => {
        new TestParameter(stack, 'TestParameter', { type: parameterType });
    });
    const expected = {
        Parameters: {
            TestParameter: { Type: 'AWS::S3::Bucket' }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.NO_REPLACES));
});
failingExample('expect <synthStack> to be a superset of <template> with parameters', () => {
    const parameterType = 'Test::Parameter';
    const synthStack = synthesizedStack(stack => {
        // Added
        new TestParameter(stack, 'NewParameter', { type: 'AWS::S3::Bucket' });
        // Expected
        new TestParameter(stack, 'TestParameterA', { type: parameterType });
        // Expected, but has different properties - will break
        new TestParameter(stack, 'TestParameterB', { type: parameterType, default: { Foo: 'Bar' } });
    });
    const expected = {
        Parameters: {
            TestParameterA: { Type: 'Test::Parameter' },
            TestParameterB: { Type: 'Test::Parameter', Default: { Foo: 'Baz' } }
        }
    };
    index_1.expect(synthStack).to(index_1.matchTemplate(expected, index_1.MatchStyle.SUPERSET));
});
// countResources
passingExample('expect <synthStack> to count resources - as expected', () => {
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'R1', { type: 'Bar' });
        new TestResource(stack, 'R2', { type: 'Bar' });
        new TestResource(stack, 'R3', { type: 'Foo' });
    });
    index_1.expect(synthStack).to(index_1.countResources('Bar', 2));
    index_1.expect(synthStack).to(index_1.countResources('Foo', 1));
});
passingExample('expect <stack> to count resources - expected no resources', () => {
    const resourceType = 'Test::Resource';
    const stack = new core_1.Stack();
    index_1.expect(stack).to(index_1.countResources(resourceType, 0));
});
failingExample('expect <synthStack> to count resources - more than expected', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'R1', { type: resourceType });
        new TestResource(stack, 'R2', { type: resourceType });
    });
    index_1.expect(synthStack).to(index_1.countResources(resourceType, 1));
});
failingExample('expect <synthStack> to count resources - less than expected', () => {
    const resourceType = 'Test::Resource';
    const synthStack = synthesizedStack(stack => {
        new TestResource(stack, 'R1', { type: resourceType });
        new TestResource(stack, 'R2', { type: resourceType });
    });
    index_1.expect(synthStack).to(index_1.countResources(resourceType, 0));
});
function passingExample(title, cb) {
    if (!exports.passing) {
        exports.passing = {};
    }
    exports.passing[title] = (test) => {
        cb(test);
        test.done();
    };
}
function failingExample(title, cb) {
    if (!exports.failing) {
        exports.failing = {};
    }
    exports.failing[title] = (test) => {
        test.throws(() => {
            cb(test);
        });
        test.done();
    };
}
function synthesizedStack(fn) {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, 'TestStack');
    fn(stack);
    const assembly = app.synth();
    return assembly.getStackArtifact(stack.artifactId);
}
class TestResource extends cdk.CfnResource {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
}
class TestParameter extends cdk.CfnParameter {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
}
//# sourceMappingURL=data:application/json;base64,