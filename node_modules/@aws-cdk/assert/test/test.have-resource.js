"use strict";
const cxapi = require("@aws-cdk/cx-api");
const fs_1 = require("fs");
const path_1 = require("path");
const index_1 = require("../lib/index");
function mkStack(template) {
    const assembly = new cxapi.CloudAssemblyBuilder();
    assembly.addArtifact('test', {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format('123456789', 'us-west-2'),
        properties: {
            templateFile: 'template.json'
        }
    });
    fs_1.writeFileSync(path_1.join(assembly.outdir, 'template.json'), JSON.stringify(template));
    return assembly.buildAssembly().getStackByName('test');
}
module.exports = {
    'support resource with no properties'(test) {
        const synthStack = mkStack({
            Resources: {
                SomeResource: {
                    Type: 'Some::Resource'
                }
            }
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource'));
        test.done();
    },
    'haveResource tells you about mismatched fields'(test) {
        const synthStack = mkStack({
            Resources: {
                SomeResource: {
                    Type: 'Some::Resource',
                    Properties: {
                        PropA: 'somevalue'
                    }
                }
            }
        });
        test.throws(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                PropA: 'othervalue'
            }));
        }, /PropA/);
        test.done();
    },
    'haveResource value matching is strict by default'(test) {
        const synthStack = mkStack({
            Resources: {
                SomeResource: {
                    Type: 'Some::Resource',
                    Properties: {
                        PropA: {
                            foo: 'somevalue',
                            bar: 'This is unexpected, so the value of PropA doesn\'t strictly match - it shouldn\'t pass'
                        },
                        PropB: 'This property is unexpected, but it\'s allowed'
                    }
                }
            }
        });
        test.throws(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                PropA: {
                    foo: 'somevalue'
                }
            }));
        }, /PropA/);
        test.done();
    },
    'haveResource allows to opt in value extension'(test) {
        const synthStack = mkStack({
            Resources: {
                SomeResource: {
                    Type: 'Some::Resource',
                    Properties: {
                        PropA: {
                            foo: 'somevalue',
                            bar: 'Additional value is permitted, as we opted in'
                        },
                        PropB: 'Additional properties is always okay!'
                    }
                }
            }
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: {
                foo: 'somevalue'
            }
        }, undefined, true));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5oYXZlLXJlc291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5oYXZlLXJlc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx5Q0FBMEM7QUFDMUMsMkJBQW1DO0FBRW5DLCtCQUE0QjtBQUM1Qix3Q0FBb0Q7QUEwRnBELFNBQVMsT0FBTyxDQUFDLFFBQWE7SUFDNUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNsRCxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtRQUMzQixJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7UUFDakQsV0FBVyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQztRQUNwRSxVQUFVLEVBQUU7WUFDVixZQUFZLEVBQUUsZUFBZTtTQUM5QjtLQUNGLENBQUMsQ0FBQztJQUVILGtCQUFhLENBQUMsV0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLE9BQU8sUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBcEdELGlCQUFTO0lBQ1AscUNBQXFDLENBQUMsSUFBVTtRQUM5QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7WUFDekIsU0FBUyxFQUFFO2dCQUNULFlBQVksRUFBRTtvQkFDWixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2QjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsY0FBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUV0RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0RBQWdELENBQUMsSUFBVTtRQUN6RCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7WUFDekIsU0FBUyxFQUFFO2dCQUNULFlBQVksRUFBRTtvQkFDWixJQUFJLEVBQUUsZ0JBQWdCO29CQUN0QixVQUFVLEVBQUU7d0JBQ1YsS0FBSyxFQUFFLFdBQVc7cUJBQ25CO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNmLGNBQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQVksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDbkQsS0FBSyxFQUFFLFlBQVk7YUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFWixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsa0RBQWtELENBQUMsSUFBVTtRQUMzRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7WUFDekIsU0FBUyxFQUFFO2dCQUNULFlBQVksRUFBRTtvQkFDWixJQUFJLEVBQUUsZ0JBQWdCO29CQUN0QixVQUFVLEVBQUU7d0JBQ1YsS0FBSyxFQUFFOzRCQUNMLEdBQUcsRUFBRSxXQUFXOzRCQUNoQixHQUFHLEVBQUUsd0ZBQXdGO3lCQUM5Rjt3QkFDRCxLQUFLLEVBQUUsZ0RBQWdEO3FCQUN4RDtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDZixjQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFZLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ25ELEtBQUssRUFBRTtvQkFDTCxHQUFHLEVBQUUsV0FBVztpQkFDakI7YUFDRixDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVaLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwrQ0FBK0MsQ0FBQyxJQUFVO1FBQ3hELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQztZQUN6QixTQUFTLEVBQUU7Z0JBQ1QsWUFBWSxFQUFFO29CQUNaLElBQUksRUFBRSxnQkFBZ0I7b0JBQ3RCLFVBQVUsRUFBRTt3QkFDVixLQUFLLEVBQUU7NEJBQ0wsR0FBRyxFQUFFLFdBQVc7NEJBQ2hCLEdBQUcsRUFBRSwrQ0FBK0M7eUJBQ3JEO3dCQUNELEtBQUssRUFBRSx1Q0FBdUM7cUJBQy9DO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxjQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFZLENBQUMsZ0JBQWdCLEVBQUU7WUFDbkQsS0FBSyxFQUFFO2dCQUNMLEdBQUcsRUFBRSxXQUFXO2FBQ2pCO1NBQ0YsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IHsgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSB9IGZyb20gJy4uL2xpYi9pbmRleCc7XG5cbmV4cG9ydCA9IHtcbiAgJ3N1cHBvcnQgcmVzb3VyY2Ugd2l0aCBubyBwcm9wZXJ0aWVzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3ludGhTdGFjayA9IG1rU3RhY2soe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFNvbWVSZXNvdXJjZToge1xuICAgICAgICAgIFR5cGU6ICdTb21lOjpSZXNvdXJjZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGV4cGVjdChzeW50aFN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ1NvbWU6OlJlc291cmNlJykpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2hhdmVSZXNvdXJjZSB0ZWxscyB5b3UgYWJvdXQgbWlzbWF0Y2hlZCBmaWVsZHMnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzeW50aFN0YWNrID0gbWtTdGFjayh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgU29tZVJlc291cmNlOiB7XG4gICAgICAgICAgVHlwZTogJ1NvbWU6OlJlc291cmNlJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBQcm9wQTogJ3NvbWV2YWx1ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QudGhyb3dzKCgpID0+IHtcbiAgICAgIGV4cGVjdChzeW50aFN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ1NvbWU6OlJlc291cmNlJywge1xuICAgICAgICBQcm9wQTogJ290aGVydmFsdWUnXG4gICAgICB9KSk7XG4gICAgfSwgL1Byb3BBLyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnaGF2ZVJlc291cmNlIHZhbHVlIG1hdGNoaW5nIGlzIHN0cmljdCBieSBkZWZhdWx0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3ludGhTdGFjayA9IG1rU3RhY2soe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFNvbWVSZXNvdXJjZToge1xuICAgICAgICAgIFR5cGU6ICdTb21lOjpSZXNvdXJjZScsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgUHJvcEE6IHtcbiAgICAgICAgICAgICAgZm9vOiAnc29tZXZhbHVlJyxcbiAgICAgICAgICAgICAgYmFyOiAnVGhpcyBpcyB1bmV4cGVjdGVkLCBzbyB0aGUgdmFsdWUgb2YgUHJvcEEgZG9lc25cXCd0IHN0cmljdGx5IG1hdGNoIC0gaXQgc2hvdWxkblxcJ3QgcGFzcydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBQcm9wQjogJ1RoaXMgcHJvcGVydHkgaXMgdW5leHBlY3RlZCwgYnV0IGl0XFwncyBhbGxvd2VkJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgZXhwZWN0KHN5bnRoU3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnU29tZTo6UmVzb3VyY2UnLCB7XG4gICAgICAgIFByb3BBOiB7XG4gICAgICAgICAgZm9vOiAnc29tZXZhbHVlJ1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSwgL1Byb3BBLyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnaGF2ZVJlc291cmNlIGFsbG93cyB0byBvcHQgaW4gdmFsdWUgZXh0ZW5zaW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3ludGhTdGFjayA9IG1rU3RhY2soe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFNvbWVSZXNvdXJjZToge1xuICAgICAgICAgIFR5cGU6ICdTb21lOjpSZXNvdXJjZScsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgUHJvcEE6IHtcbiAgICAgICAgICAgICAgZm9vOiAnc29tZXZhbHVlJyxcbiAgICAgICAgICAgICAgYmFyOiAnQWRkaXRpb25hbCB2YWx1ZSBpcyBwZXJtaXR0ZWQsIGFzIHdlIG9wdGVkIGluJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFByb3BCOiAnQWRkaXRpb25hbCBwcm9wZXJ0aWVzIGlzIGFsd2F5cyBva2F5ISdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4cGVjdChzeW50aFN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ1NvbWU6OlJlc291cmNlJywge1xuICAgICAgUHJvcEE6IHtcbiAgICAgICAgZm9vOiAnc29tZXZhbHVlJ1xuICAgICAgfVxuICAgIH0sIHVuZGVmaW5lZCwgdHJ1ZSkpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBta1N0YWNrKHRlbXBsYXRlOiBhbnkpOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3Qge1xuICBjb25zdCBhc3NlbWJseSA9IG5ldyBjeGFwaS5DbG91ZEFzc2VtYmx5QnVpbGRlcigpO1xuICBhc3NlbWJseS5hZGRBcnRpZmFjdCgndGVzdCcsIHtcbiAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQVdTX0NMT1VERk9STUFUSU9OX1NUQUNLLFxuICAgIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudFV0aWxzLmZvcm1hdCgnMTIzNDU2Nzg5JywgJ3VzLXdlc3QtMicpLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRlbXBsYXRlRmlsZTogJ3RlbXBsYXRlLmpzb24nXG4gICAgfVxuICB9KTtcblxuICB3cml0ZUZpbGVTeW5jKGpvaW4oYXNzZW1ibHkub3V0ZGlyLCAndGVtcGxhdGUuanNvbicpLCBKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZSkpO1xuICByZXR1cm4gYXNzZW1ibHkuYnVpbGRBc3NlbWJseSgpLmdldFN0YWNrQnlOYW1lKCd0ZXN0Jyk7XG59XG4iXX0=