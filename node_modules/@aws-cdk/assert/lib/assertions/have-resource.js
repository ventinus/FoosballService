"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_1 = require("../assertion");
/**
 * An assertion to check whether a resource of a given type and with the given properties exists, disregarding properties
 *
 * @param resourceType the type of the resource that is expected to be present.
 * @param properties   the properties that the resource is expected to have. A function may be provided, in which case
 *                     it will be called with the properties of candidate resources and an ``InspectionFailure``
 *                     instance on which errors should be appended, and should return a truthy value to denote a match.
 * @param comparison   the entity that is being asserted against.
 * @param allowValueExtension if properties is an object, tells whether values must match exactly, or if they are
 *                     allowed to be supersets of the reference values. Meaningless if properties is a function.
 */
function haveResource(resourceType, properties, comparison, allowValueExtension = false) {
    return new HaveResourceAssertion(resourceType, properties, comparison, allowValueExtension);
}
exports.haveResource = haveResource;
/**
 * Sugar for calling ``haveResources`` with ``allowValueExtension`` set to ``true``.
 */
function haveResourceLike(resourceType, properties, comparison) {
    return haveResource(resourceType, properties, comparison, true);
}
exports.haveResourceLike = haveResourceLike;
class HaveResourceAssertion extends assertion_1.Assertion {
    constructor(resourceType, properties, part, allowValueExtension = false) {
        super();
        this.resourceType = resourceType;
        this.properties = properties;
        this.inspected = [];
        this.predicate = typeof properties === 'function' ? properties : makeSuperObjectPredicate(properties, allowValueExtension);
        this.part = part !== undefined ? part : ResourcePart.Properties;
    }
    assertUsing(inspector) {
        for (const logicalId of Object.keys(inspector.value.Resources || {})) {
            const resource = inspector.value.Resources[logicalId];
            if (resource.Type === this.resourceType) {
                const propsToCheck = this.part === ResourcePart.Properties ? resource.Properties : resource;
                // Pass inspection object as 2nd argument, initialize failure with default string,
                // to maintain backwards compatibility with old predicate API.
                const inspection = { resource, failureReason: 'Object did not match predicate' };
                if (this.predicate(propsToCheck, inspection)) {
                    return true;
                }
                this.inspected.push(inspection);
            }
        }
        return false;
    }
    generateErrorMessage() {
        const lines = [];
        lines.push(`None of ${this.inspected.length} resources matches ${this.description}.`);
        for (const inspected of this.inspected) {
            lines.push(`- ${inspected.failureReason} in:`);
            lines.push(indent(4, JSON.stringify(inspected.resource, null, 2)));
        }
        return lines.join('\n');
    }
    assertOrThrow(inspector) {
        if (!this.assertUsing(inspector)) {
            throw new Error(this.generateErrorMessage());
        }
    }
    get description() {
        // tslint:disable-next-line:max-line-length
        return `resource '${this.resourceType}' with properties ${JSON.stringify(this.properties, undefined, 2)}`;
    }
}
exports.HaveResourceAssertion = HaveResourceAssertion;
function indent(n, s) {
    const prefix = ' '.repeat(n);
    return prefix + s.replace(/\n/g, '\n' + prefix);
}
/**
 * Make a predicate that checks property superset
 */
function makeSuperObjectPredicate(obj, allowValueExtension) {
    return (resourceProps, inspection) => {
        const errors = [];
        const ret = isSuperObject(resourceProps, obj, errors, allowValueExtension);
        inspection.failureReason = errors.join(',');
        return ret;
    };
}
/**
 * Return whether `superObj` is a super-object of `obj`.
 *
 * A super-object has the same or more property values, recursing into sub properties if ``allowValueExtension`` is true.
 */
function isSuperObject(superObj, obj, errors = [], allowValueExtension = false) {
    if (obj == null) {
        return true;
    }
    if (Array.isArray(superObj) !== Array.isArray(obj)) {
        errors.push('Array type mismatch');
        return false;
    }
    if (Array.isArray(superObj)) {
        if (obj.length !== superObj.length) {
            errors.push('Array length mismatch');
            return false;
        }
        // Do isSuperObject comparison for individual objects
        for (let i = 0; i < obj.length; i++) {
            if (!isSuperObject(superObj[i], obj[i], [], allowValueExtension)) {
                errors.push(`Array element ${i} mismatch`);
            }
        }
        return errors.length === 0;
    }
    if ((typeof superObj === 'object') !== (typeof obj === 'object')) {
        errors.push('Object type mismatch');
        return false;
    }
    if (typeof obj === 'object') {
        for (const key of Object.keys(obj)) {
            if (!(key in superObj)) {
                errors.push(`Field ${key} missing`);
                continue;
            }
            const valueMatches = allowValueExtension
                ? isSuperObject(superObj[key], obj[key], [], allowValueExtension)
                : isStrictlyEqual(superObj[key], obj[key]);
            if (!valueMatches) {
                errors.push(`Field ${key} mismatch`);
            }
        }
        return errors.length === 0;
    }
    if (superObj !== obj) {
        errors.push('Different values');
    }
    return errors.length === 0;
    function isStrictlyEqual(left, right) {
        if (left === right) {
            return true;
        }
        if (typeof left !== typeof right) {
            return false;
        }
        if (typeof left === 'object' && typeof right === 'object') {
            if (Array.isArray(left) !== Array.isArray(right)) {
                return false;
            }
            const allKeys = new Set([...Object.keys(left), ...Object.keys(right)]);
            for (const key of allKeys) {
                if (!isStrictlyEqual(left[key], right[key])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
}
exports.isSuperObject = isSuperObject;
/**
 * What part of the resource to compare
 */
var ResourcePart;
(function (ResourcePart) {
    /**
     * Only compare the resource's properties
     */
    ResourcePart[ResourcePart["Properties"] = 0] = "Properties";
    /**
     * Check the entire CloudFormation config
     *
     * (including UpdateConfig, DependsOn, etc.)
     */
    ResourcePart[ResourcePart["CompleteDefinition"] = 1] = "CompleteDefinition";
})(ResourcePart = exports.ResourcePart || (exports.ResourcePart = {}));
//# sourceMappingURL=data:application/json;base64,